{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","children","style","overflowY","border","height","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAaeA,EAXF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GACxB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACpB,6BACI,4BAAKF,GACL,2BAAIC,MCmBLK,EAxBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAMf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCHrBW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAY,mCACZY,KAAM,SACNC,YAAa,gBACbC,SAAYH,MCEbI,EATA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,EAAMG,UAEd,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEP,EAAMG,WCsBJK,E,kDAvBX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IACDS,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAU,CAACJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SAEN,6BACI,sDAILG,KAAKb,MAAMG,a,GArBCY,aCgDZC,G,wDA1CX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAcViB,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVpB,YAAawB,EAAMC,OAAOC,SAd9B,EAAKX,MAAQ,CACTrB,OAAQ,GACRM,YAAa,IALF,E,gEASE,IAAD,OAChB2B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAK,EAAKX,SAAS,CAAE1B,OAASqC,S,+BASvC,IAAD,EACyBZ,KAAKJ,MAA5BrB,EADF,EACEA,OAAQM,EADV,EACUA,YACTgC,EAAiBtC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASpC,EAAYmC,kBAEzD,OAAQzC,EAAO2C,OAEP,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAckB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7B,OAAQsC,OAPd,8C,GA5BdX,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLV,QAAQU,MAAMA,EAAMoC,a","file":"static/js/main.12e0f255.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({name, email, id}) =>{\n    return  (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robot' src={`https://robohash.org/${id}/test?200*200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )    \n}\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n\n    // if(true)\n    //     throw new Error('noooo')\n\n\n    return (\n        <div>\n        {\n            robots.map((user, i) =>  {\n                return   (\n                    <Card \n                        key={i} \n                        id={user.id} \n                        name={user.name} \n                        email={user.email}\n                    /> \n                );\n            })\n        }\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({searchfield ,searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className = 'pa3 ba b--green bg-lightest-blue'\n                type ='search' \n                placeholder ='search robots'\n                onChange = {searchChange} \n            />\n        </div>\n    )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n    console.log(props.children)\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll\n ","import React, { Component } from 'react'\n\n\nclass ErrorBoundry extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState( {hasError: true} )\n    }\n\n    render() {\n        if(this.state.hasError){\n            return (\n                <div>\n                    <h1>There is an Error....</h1>       \n                </div>\n            )\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React,{Component} from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry' \nimport './app.css'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            robots: [],\n            searchfield: ''  \n        }\n    }\n    \n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response =>  response.json())\n            .then(users =>  this.setState({ robots : users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({\n            searchfield: event.target.value\n        })\n    }\n    \n    render() {\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        return !robots.length ? <h1>Loading...</h1> :\n        (\n                <div className='tc'>\n                    <h1 className='f1'>RobotFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n        )\n        \n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n \nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}